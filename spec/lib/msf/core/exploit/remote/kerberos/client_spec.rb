# -*- coding:binary -*-

require 'spec_helper'

RSpec.describe Msf::Exploit::Remote::Kerberos::Client::TgsResponse do
  subject do
    mod = ::Msf::Exploit.new
    mod.extend ::Msf::Exploit::Remote::Kerberos::Client

    mod.send(:initialize)
    mod
  end

  # KDC_ERR_PREAUTH_FAILED - Additional pre-authentication required
  let(:as_rep_err_preauth_required) do
    decode_kerb_response(
      "\x7e\x81\xae\x30\x81\xab\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x1e"\
      "\xa4\x11\x18\x0f\x32\x30\x32\x32\x30\x35\x32\x36\x31\x35\x34\x32"\
      "\x33\x33\x5a\xa5\x05\x02\x03\x06\x1c\x2b\xa6\x03\x02\x01\x19\xa9"\
      "\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xaa\x1f\x30"\
      "\x1d\xa0\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74"\
      "\x67\x74\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xac\x51"\
      "\x04\x4f\x30\x4d\x30\x16\xa1\x03\x02\x01\x0b\xa2\x0f\x04\x0d\x30"\
      "\x0b\x30\x09\xa0\x03\x02\x01\x17\xa1\x02\x04\x00\x30\x12\xa1\x03"\
      "\x02\x01\x13\xa2\x0b\x04\x09\x30\x07\x30\x05\xa0\x03\x02\x01\x17"\
      "\x30\x09\xa1\x03\x02\x01\x02\xa2\x02\x04\x00\x30\x09\xa1\x03\x02"\
      "\x01\x10\xa2\x02\x04\x00\x30\x09\xa1\x03\x02\x01\x0f\xa2\x02\x04"\
      "\x00"
    )
  end

  # KDC_ERR_C_PRINCIPAL_UNKNOWN
  let(:as_rep_err_c_principal_unknown) do
    decode_kerb_response(
      "\x7e\x5a\x30\x58\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x1e\xa4\x11" \
      "\x18\x0f\x32\x30\x32\x32\x30\x35\x31\x33\x30\x30\x31\x35\x35\x33" \
      "\x5a\xa5\x05\x02\x03\x02\xd0\xf5\xa6\x03\x02\x01\x06\xa9\x0c\x1b" \
      "\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xaa\x1f\x30\x1d\xa0" \
      "\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74" \
      "\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c"
    )
  end

  # KDC_ERR_PREAUTH_FAILED - Pre-authentication information was invalid
  let(:as_rep_err_preauth_failed) do
    decode_kerb_response(
      "\x7e\x81\x8d\x30\x81\x8a\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x1e" \
      "\xa4\x11\x18\x0f\x32\x30\x32\x32\x30\x35\x32\x36\x31\x35\x34\x33" \
      "\x32\x38\x5a\xa5\x05\x02\x03\x0e\x51\x88\xa6\x03\x02\x01\x18\xa9" \
      "\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xaa\x1f\x30" \
      "\x1d\xa0\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74" \
      "\x67\x74\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xac\x30" \
      "\x04\x2e\x30\x2c\x30\x16\xa1\x03\x02\x01\x0b\xa2\x0f\x04\x0d\x30" \
      "\x0b\x30\x09\xa0\x03\x02\x01\x17\xa1\x02\x04\x00\x30\x12\xa1\x03" \
      "\x02\x01\x13\xa2\x0b\x04\x09\x30\x07\x30\x05\xa0\x03\x02\x01\x17"
    )
  end

  # KRB_AP_ERR_SKEW - Clock skew too great
  let(:as_rep_err_skew) do
    decode_kerb_response(
      "\x7e\x5a\x30\x58\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x1e\xa4\x11" \
      "\x18\x0f\x32\x30\x32\x32\x30\x35\x31\x32\x32\x33\x33\x37\x33\x35" \
      "\x5a\xa5\x05\x02\x03\x04\x66\x1e\xa6\x03\x02\x01\x25\xa9\x0c\x1b" \
      "\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xaa\x1f\x30\x1d\xa0" \
      "\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74" \
      "\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c"
    )
  end

  # Success - no error
  let(:as_rep_success) do
    decode_kerb_response(
      "\x6b\x82\x05\x5b\x30\x82\x05\x57\xa0\x03\x02\x01\x05\xa1\x03\x02" \
      "\x01\x0b\xa3\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c" \
      "\xa4\x17\x30\x15\xa0\x03\x02\x01\x01\xa1\x0e\x30\x0c\x1b\x0a\x62" \
      "\x61\x73\x69\x63\x5f\x75\x73\x65\x72\xa5\x82\x04\x13\x61\x82\x04" \
      "\x0f\x30\x82\x04\x0b\xa0\x03\x02\x01\x05\xa1\x0c\x1b\x0a\x44\x45" \
      "\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa2\x1f\x30\x1d\xa0\x03\x02\x01" \
      "\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74\x1b\x0a\x44" \
      "\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa3\x82\x03\xd3\x30\x82\x03" \
      "\xcf\xa0\x03\x02\x01\x17\xa1\x03\x02\x01\x02\xa2\x82\x03\xc1\x04" \
      "\x82\x03\xbd\x2e\xe3\xe5\x8e\xb6\xe1\x0f\x3c\xf4\x03\x7d\xf0\xfd" \
      "\x7f\x76\xc6\x7d\x55\xc4\x91\x28\x48\xbd\xe0\xe2\xbe\xc5\xc2\xe7" \
      "\x62\x02\xc8\x67\x50\x96\xa8\x3e\x3e\x6c\x89\xa2\x0f\x7d\xaa\x98" \
      "\x2a\x92\x69\x1f\xf2\x6b\x4b\x5f\xcd\x8e\x51\xe5\xab\x72\x57\x01" \
      "\xd6\x55\x37\x34\xdc\x7c\x69\x63\x3d\xff\x97\xc5\x58\xb5\x5f\x3f" \
      "\xce\x3a\xdb\xa7\xf9\x73\x63\x19\xa1\xe3\x50\x86\xb3\xf7\x1d\xbf" \
      "\x8c\x63\x05\xce\x98\x82\x6a\x19\x69\x88\x52\xc6\x55\x4b\x6b\x06" \
      "\x8c\x20\xba\xa6\x5e\x4f\x7e\xd9\x62\xe0\xf7\xcc\x31\x76\xc1\x4f" \
      "\xc3\x8b\x20\x32\x00\x2f\x41\x59\xaf\x5b\x6c\x92\xd9\xaf\x6d\xc2" \
      "\xd3\x0a\x76\xce\x92\xf2\xcb\x89\x4c\x47\xe8\xb7\xf0\x5d\xdf\x97" \
      "\xbf\x74\x18\x4f\xe3\x8b\x3c\xf3\x21\x46\xb6\x16\x15\x5e\xc2\x57" \
      "\x16\xfe\x6b\xb2\x76\xb6\x42\x31\xfb\x6a\xe4\xc2\xb3\xf7\x99\x30" \
      "\xd0\x4b\x74\xb2\x16\x11\x92\x36\x32\xb0\xec\x7b\xe4\x7d\xa1\xb1" \
      "\xbe\x52\x10\x25\x95\xb5\x0f\x14\xe8\xd4\x84\xd9\x2d\xf1\x67\x54" \
      "\xd3\x24\x02\xb1\x69\xa0\x3c\x62\x69\x6e\x59\xec\xbd\xa0\xb4\xb4" \
      "\xe7\x31\xb9\xa9\x53\xb8\x76\x31\xf8\x24\x45\x18\x5e\x03\xed\x13" \
      "\xd3\xc3\xef\x79\x13\xea\x14\x69\x8b\x22\xe2\x2d\x56\x4c\xdd\x76" \
      "\xe2\xe0\xe6\x1b\x0e\xb8\xc1\xe8\xd0\x86\xcf\x23\x08\xba\xa5\xd5" \
      "\xd2\x12\x3e\x8f\x11\x52\x07\x40\x2c\xa6\x0c\x92\x31\x57\xaa\xcb" \
      "\x4e\xa2\xba\x69\x78\xab\x8b\xcd\x37\xd8\x78\xe7\x40\x42\x21\x4f" \
      "\xa9\x2d\x4f\xac\x56\x50\xe8\xd1\xc5\xe5\xdf\x82\x2d\x6e\xbe\xa5" \
      "\x5f\xf9\x84\xe0\xc2\x27\x5c\x77\x56\xac\x92\x6e\x3d\x33\x44\xa0" \
      "\x8e\xe9\xc4\x21\x2a\x9c\x2e\xe8\xcd\x26\xd9\x72\x53\xb1\xcb\x4a" \
      "\xc3\x2e\xb9\x54\x6f\x15\xfd\x16\xa4\x50\xbf\xe0\x0f\x2f\x48\x64" \
      "\x98\x2e\xb8\x91\xa8\xaa\x8d\x36\x4a\x48\x5e\x05\xe3\x72\x42\xa1" \
      "\xb9\x84\x54\x90\x8e\x01\x04\x06\x89\xef\x3c\x11\x31\x75\x25\xac" \
      "\x08\xe9\x0d\xb9\x35\x10\x69\x3e\xbe\x0e\x61\x02\x25\xdc\xf3\x17" \
      "\xdb\xd5\x49\xe8\xc1\xc6\x1b\x0e\x0a\x20\x64\x8c\xcf\x0e\x65\xc5" \
      "\x49\xb1\xba\x70\x1f\xdd\x07\x62\xd4\xce\xa3\x0a\xa1\xbc\x95\xed" \
      "\x2b\x5a\x6f\x8a\x35\x78\xa5\x97\x99\xab\x3f\x0d\x78\x3d\x5a\xcf" \
      "\xbc\xfc\xfe\xdc\xf0\x89\xef\xeb\x4c\x22\xd2\xde\x20\x6b\x52\x32" \
      "\x6d\x81\x5f\x64\x70\xef\xd7\x88\x90\x34\x94\x75\xa6\x60\xbe\x54" \
      "\x3b\x6a\x26\x8c\xe7\xaa\x5a\x26\x93\xec\x79\xf6\x23\x68\xef\xf5" \
      "\xc7\x24\x0b\x78\x63\xf4\x7e\x31\x3b\xcb\x77\x22\xd0\x39\xf0\x41" \
      "\xcc\x94\x81\x5c\xd4\xf2\x13\xd7\xe9\x08\x69\xfb\xbe\xbf\x4d\xfe" \
      "\x59\x89\x6a\xeb\x5a\xef\x96\x92\x5b\x80\x23\x8a\xcc\xc0\x1f\x03" \
      "\xd9\x99\x2b\x92\xe9\xea\x5b\x90\xce\x75\x8a\x6e\xd7\xcc\xae\xc6" \
      "\xa4\x5e\x73\x34\x6a\x08\x3e\xe9\xca\x2b\xc9\x41\x72\xe4\xd6\x6d" \
      "\x88\x1c\x8e\x98\xc9\xa4\x9d\x69\x0b\x2c\x65\x1b\xb1\xbf\x78\xca" \
      "\x92\xd2\x0f\x0f\x01\x47\xf3\x02\x0e\x23\x15\xde\x18\x1c\x4e\x33" \
      "\x7a\x65\x37\xaa\x70\x13\x3b\xd3\x45\x71\x1f\xc4\xbc\xa8\xc9\xf3" \
      "\xe0\xe4\x2e\x52\x3f\x0d\xed\xc5\x4f\xf3\x5d\xe8\xe9\xaa\x97\x4c" \
      "\x48\xf9\x01\xab\x0a\x3f\x36\xf7\xa6\x30\xef\x31\xc7\x1e\x46\xa3" \
      "\x97\x59\x57\xbf\x22\xe5\xe9\xf5\x4b\xc9\x52\x68\x51\xcb\x15\xb1" \
      "\xd9\x00\x51\x06\xfb\x54\xbc\x28\xa3\xa7\x6d\x3b\xb1\x8e\x36\x0a" \
      "\x3c\x39\xce\xda\x46\x7f\xed\x22\x42\x0e\xa7\x41\xe6\x64\xe8\x7f" \
      "\x25\xd0\x77\x0f\x45\xf9\xbe\xb6\x8c\x9f\x33\x76\x49\x13\x2b\x2e" \
      "\x19\x50\x6c\xee\x52\x6b\x6b\xf8\x13\xf4\x4e\x3c\xeb\x0c\x6e\x03" \
      "\xb6\x71\xab\xea\xbb\xed\x71\xac\xc3\x1e\x7a\x19\x31\x2c\x87\x52" \
      "\xb8\x5d\x4c\x75\x31\x2a\xe1\xc0\x9b\x49\x65\xe1\xb5\xcc\xbc\xd6" \
      "\x01\x85\xb5\x34\x60\x25\x9d\x89\xe2\x34\xa8\x45\xe7\x77\xbf\x23" \
      "\xa5\x4b\xc5\x5d\x14\xfc\x65\x1a\x95\xd7\xcf\x05\xde\x6a\x5d\xcc" \
      "\xa8\xed\x22\x66\x0c\x9d\xcc\x9f\x53\x3a\xa0\xd2\xfb\x41\xa3\x9e" \
      "\x3b\xcb\xb0\xd1\xbe\x3f\xe0\xab\xf9\x37\xc2\x11\x19\xe8\x6a\x57" \
      "\x26\x77\x12\x49\x44\xb4\xd0\xe7\xba\x08\x45\x7f\x9b\x13\xf0\x4a" \
      "\x5e\x6c\x30\x5a\xaf\x4e\x70\x2f\x7e\x1a\xb8\xde\xe9\x48\x66\xf7" \
      "\x84\x43\xed\xb6\x6c\xac\xb6\x9f\xaa\xc7\x7d\xc9\x27\x63\xde\x01" \
      "\xf0\x93\x15\x7a\x7e\x34\x2d\x5f\xdc\xca\x6d\xa0\xb5\x3a\x7c\xfb" \
      "\xd2\x5a\x00\x2e\xfa\xfb\x19\x90\xb2\xd1\xe6\x0e\x20\x03\x2a\xca" \
      "\x32\xbd\x52\x20\x37\xca\x46\x1f\x0f\x8f\x51\xf1\xee\xb3\x47\x27" \
      "\xa6\x82\x01\x0b\x30\x82\x01\x07\xa0\x03\x02\x01\x17\xa1\x03\x02" \
      "\x01\x03\xa2\x81\xfa\x04\x81\xf7\x35\xc5\x7a\x5b\xa5\x68\x28\xdd" \
      "\x87\x03\xf4\x13\x0a\xc3\xb0\xe6\x20\xf5\xbb\x22\x47\xec\x7d\x35" \
      "\x6e\x15\xde\x1c\x37\xfe\x8b\x92\xba\x84\x29\xec\x19\xbb\x95\xa4" \
      "\x50\xc2\x38\xf2\x9a\x75\xf6\x0e\xcc\x20\x6a\xfb\xea\x9a\x72\xb5" \
      "\x58\x3b\xb4\x6b\x9e\x5d\xcb\x52\x7c\x94\x00\x2a\xfd\x22\xcf\x3c" \
      "\x73\xb9\xa8\x22\xf6\x29\xff\x37\x34\x8f\x43\x65\xb8\xf3\x10\x2a" \
      "\x63\xc5\xc3\x5e\xbc\xf0\xd6\x7f\x8f\x18\xc1\x07\xc5\xa3\x16\x6e" \
      "\x12\x5f\x6f\xf1\xb7\x66\x63\xf0\xe1\xf6\x6f\x41\xda\x53\x40\xec" \
      "\xac\x68\x2b\xe9\x17\x40\xe2\xfa\x83\x94\x28\x8a\x60\x7d\x6e\x1b" \
      "\xd4\xaf\xe7\x98\x98\x4e\x3d\x52\x8c\xb9\x2b\xd5\x0a\xbb\x12\x21" \
      "\xcd\xa0\x3f\x21\xd6\x14\x78\x92\x37\x5b\x8b\xa4\x9e\xab\xf2\xf4" \
      "\xca\x23\x2d\x06\xf7\xa1\x6d\x07\xb1\xe8\x66\xce\x52\x0b\x60\xe5" \
      "\x51\x7b\xe8\x4e\x30\x47\x24\x04\xdc\xeb\xb3\x2f\x59\x87\x92\xa7" \
      "\x14\x4b\xbe\x4b\xf1\x34\x6f\x94\x8a\x1a\x36\x00\xac\xee\xff\x87" \
      "\xd5\x58\xe8\xa4\x92\x6e\xfb\x8b\x72\x96\xbb\x04\x09\x01\xd3\xb8" \
      "\x9e\x54\x62\x48\x73\x6d\xe6\x13\xbb\x3c\xe8\x26\x88\xe4\xcc"
    )
  end

  def decode_kerb_response(data)
    Rex::Proto::Kerberos::Client.new.send(:decode_kerb_response, data)
  end

  describe '#send_request_tgt' do
    let(:mock_client) do
      instance_double(Rex::Proto::Kerberos::Client, close: nil)
    end

    let(:mock_kerberos_responses) { [] }

    before(:each) do
      allow(mock_client).to receive(:send_recv).and_return(*mock_kerberos_responses)
      allow(Rex::Proto::Kerberos::Client).to receive(:new).and_return(mock_client)
    end

    context 'when the account is unknown' do
      let(:mock_kerberos_responses) do
        [as_rep_err_c_principal_unknown]
      end

      it 'raises an erorr' do
        expect do
          subject.send_request_tgt(
            server_name: 'krbtgt/DEMO.local',
            client_name: 'unknown_user',
            password: 'password',
            realm: 'DEMO.local'
          )
        end.to raise_error(Rex::Proto::Kerberos::Model::Error::KerberosError, /Client not found in Kerberos database/)
        expect(mock_client).to have_received(:send_recv).once
      end
    end

    context 'when kerberos preauth is not required' do
      let(:mock_kerberos_responses) do
        [as_rep_success]
      end

      it 'returns the ticket' do
        res = subject.send_request_tgt(
          server_name: 'krbtgt/DEMO.local',
          client_name: 'basic_user',
          password: nil,
          realm: 'DEMO.local'
        )

        expect(res.ticket.realm).to eq('DEMO.LOCAL')
        expect(res.ticket.sname.name_string).to eq(['krbtgt', 'DEMO.LOCAL'])
        expect(res.preauth_required).to be false
        expect(mock_client).to have_received(:send_recv).once
      end
    end

    context 'when kerberos preauth is required' do
      context 'when the authentication succeeds' do
        let(:mock_kerberos_responses) do
          [as_rep_err_preauth_required, as_rep_success]
        end

        it 'returns the ticket' do
          res = subject.send_request_tgt(
            server_name: 'krbtgt/DEMO.local',
            client_name: 'basic_user',
            password: 'password',
            realm: 'DEMO.local'
          )

          expect(res.ticket.realm).to eq('DEMO.LOCAL')
          expect(res.ticket.sname.name_string).to eq(['krbtgt', 'DEMO.LOCAL'])
          expect(res.preauth_required).to be true
          expect(mock_client).to have_received(:send_recv).twice
        end
      end

      context 'when the authentication fails' do
        let(:mock_kerberos_responses) do
          [as_rep_err_preauth_required, as_rep_err_preauth_failed]
        end

        it 'returns the ticket' do
          expect do
            subject.send_request_tgt(
              server_name: 'krbtgt/DEMO.local',
              client_name: 'basic_user',
              password: 'password',
              realm: 'DEMO.local'
            )
          end.to raise_error(Rex::Proto::Kerberos::Model::Error::KerberosError, /Pre-authentication information was invalid/)
          expect(mock_client).to have_received(:send_recv).twice
        end
      end

      context 'when a clock skew error is returned' do
        let(:mock_kerberos_responses) do
          [as_rep_err_preauth_required, as_rep_err_skew]
        end

        it 'raises an error' do
          expect do
            subject.send_request_tgt(
              server_name: 'krbtgt/DEMO.local',
              client_name: 'basic_user',
              password: 'password',
              realm: 'DEMO.local'
            )
          end.to raise_error(Rex::Proto::Kerberos::Model::Error::KerberosError, /Clock skew too great.*off by \d+ seconds/)
          expect(mock_client).to have_received(:send_recv).twice
        end
      end
    end
  end
end
